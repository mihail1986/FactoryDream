package md.factorydream.entites;
// Generated Apr 13, 2016 10:19:57 AM by Hibernate Tools 4.3.1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * RoleAccess generated by hbm2java
 */
@Entity
@Table(name = "role_access", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = {"id_role", "id_user", "id_access", "id_url"})
)

public class RoleAccess implements java.io.Serializable {

    private int id;
    private Access access;
    private Roles roles;
    private Url url;
    private Users users;

    public RoleAccess() {
    }

    public RoleAccess(int id, Access access, Roles roles, Users users) {
        this.id = id;
        this.access = access;
        this.roles = roles;
        this.users = users;
    }

    public RoleAccess(int id, Access access, Roles roles, Url url, Users users) {
        this.id = id;
        this.access = access;
        this.roles = roles;
        this.url = url;
        this.users = users;
    }

    @Id

    @Column(name = "id", unique = true, nullable = false)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_access", nullable = false)
    public Access getAccess() {
        return this.access;
    }

    public void setAccess(Access access) {
        this.access = access;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_role", nullable = false)
    public Roles getRoles() {
        return this.roles;
    }

    public void setRoles(Roles roles) {
        this.roles = roles;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_url")
    public Url getUrl() {
        return this.url;
    }

    public void setUrl(Url url) {
        this.url = url;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_user", nullable = false)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        this.users = users;
    }

}
