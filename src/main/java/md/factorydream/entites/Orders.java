package md.factorydream.entites;
// Generated Apr 13, 2016 10:19:57 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Orders generated by hbm2java
 */
@Entity
@Table(name = "orders", schema = "public"
)

public class Orders implements java.io.Serializable {

    private long id;
    private Colors colors;
    private Customers customers;
    private Diameters diameters;
    private Models models;
    private StatusCod statusCod;
    private Threads threads;
    private Types types;
    private Users users;
    private Date orderData;
    private String orderIdentifier;
    private int quantity;
    private Date delivery;
    private Date distributionDate;
    private Date lastUpdateDate;
    private Set<Appointment> appointments = new HashSet<Appointment>(0);
    private Set<OrderParameters> orderParameterses = new HashSet<OrderParameters>(0);
    private Set<OrderNote> orderNotes = new HashSet<OrderNote>(0);
    private Set<Reports> reportses = new HashSet<Reports>(0);

    public Orders() {
    }

    public Orders(long id, Colors colors, Customers customers, Diameters diameters, Models models, Types types, Users users, Date orderData, String orderIdentifier, int quantity, Date delivery, Date distributionDate) {
        this.id = id;
        this.colors = colors;
        this.customers = customers;
        this.diameters = diameters;
        this.models = models;
        this.types = types;
        this.users = users;
        this.orderData = orderData;
        this.orderIdentifier = orderIdentifier;
        this.quantity = quantity;
        this.delivery = delivery;
        this.distributionDate = distributionDate;
    }

    public Orders(long id, Colors colors, Customers customers, Diameters diameters, Models models, StatusCod statusCod, Threads threads, Types types, Users users, Date orderData, String orderIdentifier, int quantity, Date delivery, Date distributionDate, Date lastUpdateDate, Set<Appointment> appointments, Set<OrderParameters> orderParameterses, Set<OrderNote> orderNotes, Set<Reports> reportses) {
        this.id = id;
        this.colors = colors;
        this.customers = customers;
        this.diameters = diameters;
        this.models = models;
        this.statusCod = statusCod;
        this.threads = threads;
        this.types = types;
        this.users = users;
        this.orderData = orderData;
        this.orderIdentifier = orderIdentifier;
        this.quantity = quantity;
        this.delivery = delivery;
        this.distributionDate = distributionDate;
        this.lastUpdateDate = lastUpdateDate;
        this.appointments = appointments;
        this.orderParameterses = orderParameterses;
        this.orderNotes = orderNotes;
        this.reportses = reportses;
    }

    @Id

    @Column(name = "id", unique = true, nullable = false)
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_color", nullable = false)
    public Colors getColors() {
        return this.colors;
    }

    public void setColors(Colors colors) {
        this.colors = colors;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_customer", nullable = false)
    public Customers getCustomers() {
        return this.customers;
    }

    public void setCustomers(Customers customers) {
        this.customers = customers;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_diameter", nullable = false)
    public Diameters getDiameters() {
        return this.diameters;
    }

    public void setDiameters(Diameters diameters) {
        this.diameters = diameters;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_model", nullable = false)
    public Models getModels() {
        return this.models;
    }

    public void setModels(Models models) {
        this.models = models;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_status_code")
    public StatusCod getStatusCod() {
        return this.statusCod;
    }

    public void setStatusCod(StatusCod statusCod) {
        this.statusCod = statusCod;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_thread")
    public Threads getThreads() {
        return this.threads;
    }

    public void setThreads(Threads threads) {
        this.threads = threads;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_type", nullable = false)
    public Types getTypes() {
        return this.types;
    }

    public void setTypes(Types types) {
        this.types = types;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_user_last_update", nullable = false)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        this.users = users;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "order_data", nullable = false, length = 29)
    public Date getOrderData() {
        return this.orderData;
    }

    public void setOrderData(Date orderData) {
        this.orderData = orderData;
    }

    @Column(name = "order_identifier", nullable = false, length = 50)
    public String getOrderIdentifier() {
        return this.orderIdentifier;
    }

    public void setOrderIdentifier(String orderIdentifier) {
        this.orderIdentifier = orderIdentifier;
    }

    @Column(name = "quantity", nullable = false)
    public int getQuantity() {
        return this.quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "delivery", nullable = false, length = 29)
    public Date getDelivery() {
        return this.delivery;
    }

    public void setDelivery(Date delivery) {
        this.delivery = delivery;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "distribution_date", nullable = false, length = 29)
    public Date getDistributionDate() {
        return this.distributionDate;
    }

    public void setDistributionDate(Date distributionDate) {
        this.distributionDate = distributionDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_update_date", length = 29)
    public Date getLastUpdateDate() {
        return this.lastUpdateDate;
    }

    public void setLastUpdateDate(Date lastUpdateDate) {
        this.lastUpdateDate = lastUpdateDate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "orders")
    public Set<Appointment> getAppointments() {
        return this.appointments;
    }

    public void setAppointments(Set<Appointment> appointments) {
        this.appointments = appointments;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "orders")
    public Set<OrderParameters> getOrderParameterses() {
        return this.orderParameterses;
    }

    public void setOrderParameterses(Set<OrderParameters> orderParameterses) {
        this.orderParameterses = orderParameterses;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "orders")
    public Set<OrderNote> getOrderNotes() {
        return this.orderNotes;
    }

    public void setOrderNotes(Set<OrderNote> orderNotes) {
        this.orderNotes = orderNotes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "orders")
    public Set<Reports> getReportses() {
        return this.reportses;
    }

    public void setReportses(Set<Reports> reportses) {
        this.reportses = reportses;
    }

}
