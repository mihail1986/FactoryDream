package md.factorydream.entites;
// Generated Apr 13, 2016 10:19:57 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Customers generated by hbm2java
 */
@Entity
@Table(name = "customers", schema = "public"
)

public class Customers implements java.io.Serializable {

    private long id;
    private StatusCod statusCod;
    private Users users;
    private String name;
    private String address;
    private String phone;
    private String email;
    private String customerDescription;
    private String note;
    private Date lastUpdateDate;
    private Set<Orders> orderses = new HashSet<Orders>(0);
    private Set<ReportOrderParams> reportOrderParamses = new HashSet<ReportOrderParams>(0);

    public Customers() {
    }

    public Customers(long id, Users users, String name) {
        this.id = id;
        this.users = users;
        this.name = name;
    }

    public Customers(long id, StatusCod statusCod, Users users, String name, String address, String phone, String email, String customerDescription, String note, Date lastUpdateDate, Set<Orders> orderses, Set<ReportOrderParams> reportOrderParamses) {
        this.id = id;
        this.statusCod = statusCod;
        this.users = users;
        this.name = name;
        this.address = address;
        this.phone = phone;
        this.email = email;
        this.customerDescription = customerDescription;
        this.note = note;
        this.lastUpdateDate = lastUpdateDate;
        this.orderses = orderses;
        this.reportOrderParamses = reportOrderParamses;
    }

    @Id

    @Column(name = "id", unique = true, nullable = false)
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "id_status_code")
    public StatusCod getStatusCod() {
        return this.statusCod;
    }

    public void setStatusCod(StatusCod statusCod) {
        this.statusCod = statusCod;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "id_user_last_update", nullable = false)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        this.users = users;
    }

    @Column(name = "name", nullable = false, length = 250)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "address")
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Column(name = "phone")
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Column(name = "email")
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "customer_description")
    public String getCustomerDescription() {
        return this.customerDescription;
    }

    public void setCustomerDescription(String customerDescription) {
        this.customerDescription = customerDescription;
    }

    @Column(name = "note")
    public String getNote() {
        return this.note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_update_date", length = 29)
    public Date getLastUpdateDate() {
        return this.lastUpdateDate;
    }

    public void setLastUpdateDate(Date lastUpdateDate) {
        this.lastUpdateDate = lastUpdateDate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "customers")
    public Set<Orders> getOrderses() {
        return this.orderses;
    }

    public void setOrderses(Set<Orders> orderses) {
        this.orderses = orderses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "customers")
    public Set<ReportOrderParams> getReportOrderParamses() {
        return this.reportOrderParamses;
    }

    public void setReportOrderParamses(Set<ReportOrderParams> reportOrderParamses) {
        this.reportOrderParamses = reportOrderParamses;
    }

}
