package md.factorydream.entites;
// Generated Apr 13, 2016 10:19:57 AM by Hibernate Tools 4.3.1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * OrderNote generated by hbm2java
 */
@Entity
@Table(name = "order_note", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = {"id_order", "id_note_groups"})
)

public class OrderNote implements java.io.Serializable {

    private long id;
    private GroupNotes groupNotes;
    private Orders orders;
    private Users users;
    private Date lastUpdateDate;

    public OrderNote() {
    }

    public OrderNote(long id, GroupNotes groupNotes, Orders orders, Users users) {
        this.id = id;
        this.groupNotes = groupNotes;
        this.orders = orders;
        this.users = users;
    }

    public OrderNote(long id, GroupNotes groupNotes, Orders orders, Users users, Date lastUpdateDate) {
        this.id = id;
        this.groupNotes = groupNotes;
        this.orders = orders;
        this.users = users;
        this.lastUpdateDate = lastUpdateDate;
    }

    @Id

    @Column(name = "id", unique = true, nullable = false)
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_note_groups", nullable = false)
    public GroupNotes getGroupNotes() {
        return this.groupNotes;
    }

    public void setGroupNotes(GroupNotes groupNotes) {
        this.groupNotes = groupNotes;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_order", nullable = false)
    public Orders getOrders() {
        return this.orders;
    }

    public void setOrders(Orders orders) {
        this.orders = orders;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_user_last_update", nullable = false)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        this.users = users;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_update_date", length = 29)
    public Date getLastUpdateDate() {
        return this.lastUpdateDate;
    }

    public void setLastUpdateDate(Date lastUpdateDate) {
        this.lastUpdateDate = lastUpdateDate;
    }

}
